// <auto-generated />
using System;
using Implementacija.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Implementacija.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230606115128_m324")]
    partial class m324
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Implementacija.Models.Dvorana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("adresaDvorane")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("brojSjedista")
                        .HasColumnType("int");

                    b.Property<string>("iznajmljivacId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nazivDvorane")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("iznajmljivacId");

                    b.ToTable("Dvorane");
                });

            modelBuilder.Entity("Implementacija.Models.Koncert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("izvodjacId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zanr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("izvodjacId");

                    b.ToTable("Koncerti");
                });

            modelBuilder.Entity("Implementacija.Models.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("Implementacija.Models.Poruka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("primalacId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("primalacId");

                    b.ToTable("Poruke");
                });

            modelBuilder.Entity("Implementacija.Models.Recenzija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("izvodjacId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("izvodjacId");

                    b.ToTable("Recenzije");
                });

            modelBuilder.Entity("Implementacija.Models.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("cijena")
                        .HasColumnType("float");

                    b.Property<bool>("potvrda")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("Implementacija.Models.RezervacijaDvorane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("dvoranaId")
                        .HasColumnType("int");

                    b.Property<string>("izvodjacId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("rezervacijaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("dvoranaId");

                    b.HasIndex("izvodjacId");

                    b.HasIndex("rezervacijaId");

                    b.ToTable("RezervacijaDvorana");
                });

            modelBuilder.Entity("Implementacija.Models.RezervacijaKarte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("koncertId")
                        .HasColumnType("int");

                    b.Property<string>("obicniKorisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("rezervacijaId")
                        .HasColumnType("int");

                    b.Property<int>("tipMjesta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("koncertId");

                    b.HasIndex("obicniKorisnikId");

                    b.HasIndex("rezervacijaId");

                    b.ToTable("RezervacijaKarata");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Implementacija.Models.Iznajmljivac", b =>
                {
                    b.HasBaseType("Implementacija.Models.Korisnik");

                    b.ToTable("Iznajmljivaci");
                });

            modelBuilder.Entity("Implementacija.Models.Izvodjac", b =>
                {
                    b.HasBaseType("Implementacija.Models.Korisnik");

                    b.ToTable("Izvodjaci");
                });

            modelBuilder.Entity("Implementacija.Models.ObicniKorisnik", b =>
                {
                    b.HasBaseType("Implementacija.Models.Korisnik");

                    b.ToTable("ObicniKorisnici");
                });

            modelBuilder.Entity("Implementacija.Models.Dvorana", b =>
                {
                    b.HasOne("Implementacija.Models.Iznajmljivac", "iznajmljivac")
                        .WithMany()
                        .HasForeignKey("iznajmljivacId");

                    b.Navigation("iznajmljivac");
                });

            modelBuilder.Entity("Implementacija.Models.Koncert", b =>
                {
                    b.HasOne("Implementacija.Models.Izvodjac", "izvodjac")
                        .WithMany()
                        .HasForeignKey("izvodjacId");

                    b.Navigation("izvodjac");
                });

            modelBuilder.Entity("Implementacija.Models.Poruka", b =>
                {
                    b.HasOne("Implementacija.Models.ObicniKorisnik", "primalac")
                        .WithMany()
                        .HasForeignKey("primalacId");

                    b.Navigation("primalac");
                });

            modelBuilder.Entity("Implementacija.Models.Recenzija", b =>
                {
                    b.HasOne("Implementacija.Models.Izvodjac", "izvodjac")
                        .WithMany()
                        .HasForeignKey("izvodjacId");

                    b.Navigation("izvodjac");
                });

            modelBuilder.Entity("Implementacija.Models.RezervacijaDvorane", b =>
                {
                    b.HasOne("Implementacija.Models.Dvorana", "dvorana")
                        .WithMany()
                        .HasForeignKey("dvoranaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Implementacija.Models.Izvodjac", "izvodjac")
                        .WithMany()
                        .HasForeignKey("izvodjacId");

                    b.HasOne("Implementacija.Models.Rezervacija", "rezervacija")
                        .WithMany()
                        .HasForeignKey("rezervacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dvorana");

                    b.Navigation("izvodjac");

                    b.Navigation("rezervacija");
                });

            modelBuilder.Entity("Implementacija.Models.RezervacijaKarte", b =>
                {
                    b.HasOne("Implementacija.Models.Koncert", "koncert")
                        .WithMany()
                        .HasForeignKey("koncertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Implementacija.Models.ObicniKorisnik", "obicniKorisnik")
                        .WithMany()
                        .HasForeignKey("obicniKorisnikId");

                    b.HasOne("Implementacija.Models.Rezervacija", "rezervacija")
                        .WithMany()
                        .HasForeignKey("rezervacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("koncert");

                    b.Navigation("obicniKorisnik");

                    b.Navigation("rezervacija");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Implementacija.Models.Iznajmljivac", b =>
                {
                    b.HasOne("Implementacija.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("Implementacija.Models.Iznajmljivac", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Implementacija.Models.Izvodjac", b =>
                {
                    b.HasOne("Implementacija.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("Implementacija.Models.Izvodjac", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Implementacija.Models.ObicniKorisnik", b =>
                {
                    b.HasOne("Implementacija.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("Implementacija.Models.ObicniKorisnik", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
